// Code generated by MockGen. DO NOT EDIT.
// Source: token_encoder.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	token "omics/pkg/security/domain/token"
	reflect "reflect"
)

// MockTokenEncoder is a mock of TokenEncoder interface.
type MockTokenEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockTokenEncoderMockRecorder
}

// MockTokenEncoderMockRecorder is the mock recorder for MockTokenEncoder.
type MockTokenEncoderMockRecorder struct {
	mock *MockTokenEncoder
}

// NewMockTokenEncoder creates a new mock instance.
func NewMockTokenEncoder(ctrl *gomock.Controller) *MockTokenEncoder {
	mock := &MockTokenEncoder{ctrl: ctrl}
	mock.recorder = &MockTokenEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenEncoder) EXPECT() *MockTokenEncoderMockRecorder {
	return m.recorder
}

// Encode mocks base method.
func (m *MockTokenEncoder) Encode(id token.TokenID) (token.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", id)
	ret0, _ := ret[0].(token.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockTokenEncoderMockRecorder) Encode(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockTokenEncoder)(nil).Encode), id)
}

// Decode mocks base method.
func (m *MockTokenEncoder) Decode(t token.Token) (token.TokenID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", t)
	ret0, _ := ret[0].(token.TokenID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode.
func (mr *MockTokenEncoderMockRecorder) Decode(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockTokenEncoder)(nil).Decode), t)
}
